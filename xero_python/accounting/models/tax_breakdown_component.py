# coding: utf-8

"""
    Xero Accounting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    Contact: api@xero.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401

from xero_python.models import BaseModel


class TaxBreakdownComponent(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "tax_component_id": "str",
        "type": "str",
        "name": "str",
        "tax_percentage": "float",
        "tax_amount": "float",
        "taxable_amount": "float",
        "non_taxable_amount": "float",
        "exempt_amount": "float",
        "state_assigned_no": "str",
        "jurisdiction_region": "str",
    }

    attribute_map = {
        "tax_component_id": "TaxComponentId",
        "type": "Type",
        "name": "Name",
        "tax_percentage": "TaxPercentage",
        "tax_amount": "TaxAmount",
        "taxable_amount": "TaxableAmount",
        "non_taxable_amount": "NonTaxableAmount",
        "exempt_amount": "ExemptAmount",
        "state_assigned_no": "StateAssignedNo",
        "jurisdiction_region": "JurisdictionRegion",
    }

    def __init__(
        self,
        tax_component_id=None,
        type=None,
        name=None,
        tax_percentage=None,
        tax_amount=None,
        taxable_amount=None,
        non_taxable_amount=None,
        exempt_amount=None,
        state_assigned_no=None,
        jurisdiction_region=None,
    ):  # noqa: E501
        """TaxBreakdownComponent - a model defined in OpenAPI"""  # noqa: E501

        self._tax_component_id = None
        self._type = None
        self._name = None
        self._tax_percentage = None
        self._tax_amount = None
        self._taxable_amount = None
        self._non_taxable_amount = None
        self._exempt_amount = None
        self._state_assigned_no = None
        self._jurisdiction_region = None
        self.discriminator = None

        if tax_component_id is not None:
            self.tax_component_id = tax_component_id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if tax_percentage is not None:
            self.tax_percentage = tax_percentage
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if taxable_amount is not None:
            self.taxable_amount = taxable_amount
        if non_taxable_amount is not None:
            self.non_taxable_amount = non_taxable_amount
        if exempt_amount is not None:
            self.exempt_amount = exempt_amount
        if state_assigned_no is not None:
            self.state_assigned_no = state_assigned_no
        if jurisdiction_region is not None:
            self.jurisdiction_region = jurisdiction_region

    @property
    def tax_component_id(self):
        """Gets the tax_component_id of this TaxBreakdownComponent.  # noqa: E501

        The unique ID number of this component  # noqa: E501

        :return: The tax_component_id of this TaxBreakdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._tax_component_id

    @tax_component_id.setter
    def tax_component_id(self, tax_component_id):
        """Sets the tax_component_id of this TaxBreakdownComponent.

        The unique ID number of this component  # noqa: E501

        :param tax_component_id: The tax_component_id of this TaxBreakdownComponent.  # noqa: E501
        :type: str
        """

        self._tax_component_id = tax_component_id

    @property
    def type(self):
        """Gets the type of this TaxBreakdownComponent.  # noqa: E501

        The type of the jurisdiction  # noqa: E501

        :return: The type of this TaxBreakdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaxBreakdownComponent.

        The type of the jurisdiction  # noqa: E501

        :param type: The type of this TaxBreakdownComponent.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "SYSGST/USCOUNTRY",
            "SYSGST/USSTATE",
            "SYSGST/USCOUNTY",
            "SYSGST/USCITY",
            "SYSGST/USSPECIAL",
            "None",
        ]  # noqa: E501

        if type:
            if type not in allowed_values:
                raise ValueError(
                    "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                        type, allowed_values
                    )
                )

        self._type = type

    @property
    def name(self):
        """Gets the name of this TaxBreakdownComponent.  # noqa: E501

        The name of the jurisdiction  # noqa: E501

        :return: The name of this TaxBreakdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxBreakdownComponent.

        The name of the jurisdiction  # noqa: E501

        :param name: The name of this TaxBreakdownComponent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this TaxBreakdownComponent.  # noqa: E501

        The percentage of the tax  # noqa: E501

        :return: The tax_percentage of this TaxBreakdownComponent.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this TaxBreakdownComponent.

        The percentage of the tax  # noqa: E501

        :param tax_percentage: The tax_percentage of this TaxBreakdownComponent.  # noqa: E501
        :type: float
        """

        self._tax_percentage = tax_percentage

    @property
    def tax_amount(self):
        """Gets the tax_amount of this TaxBreakdownComponent.  # noqa: E501

        The amount of the tax  # noqa: E501

        :return: The tax_amount of this TaxBreakdownComponent.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this TaxBreakdownComponent.

        The amount of the tax  # noqa: E501

        :param tax_amount: The tax_amount of this TaxBreakdownComponent.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def taxable_amount(self):
        """Gets the taxable_amount of this TaxBreakdownComponent.  # noqa: E501

        The amount that is taxable  # noqa: E501

        :return: The taxable_amount of this TaxBreakdownComponent.  # noqa: E501
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount):
        """Sets the taxable_amount of this TaxBreakdownComponent.

        The amount that is taxable  # noqa: E501

        :param taxable_amount: The taxable_amount of this TaxBreakdownComponent.  # noqa: E501
        :type: float
        """

        self._taxable_amount = taxable_amount

    @property
    def non_taxable_amount(self):
        """Gets the non_taxable_amount of this TaxBreakdownComponent.  # noqa: E501

        The amount that is not taxable  # noqa: E501

        :return: The non_taxable_amount of this TaxBreakdownComponent.  # noqa: E501
        :rtype: float
        """
        return self._non_taxable_amount

    @non_taxable_amount.setter
    def non_taxable_amount(self, non_taxable_amount):
        """Sets the non_taxable_amount of this TaxBreakdownComponent.

        The amount that is not taxable  # noqa: E501

        :param non_taxable_amount: The non_taxable_amount of this TaxBreakdownComponent.  # noqa: E501
        :type: float
        """

        self._non_taxable_amount = non_taxable_amount

    @property
    def exempt_amount(self):
        """Gets the exempt_amount of this TaxBreakdownComponent.  # noqa: E501

        The amount that is exempt  # noqa: E501

        :return: The exempt_amount of this TaxBreakdownComponent.  # noqa: E501
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount):
        """Sets the exempt_amount of this TaxBreakdownComponent.

        The amount that is exempt  # noqa: E501

        :param exempt_amount: The exempt_amount of this TaxBreakdownComponent.  # noqa: E501
        :type: float
        """

        self._exempt_amount = exempt_amount

    @property
    def state_assigned_no(self):
        """Gets the state_assigned_no of this TaxBreakdownComponent.  # noqa: E501

        The state assigned number of the jurisdiction  # noqa: E501

        :return: The state_assigned_no of this TaxBreakdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._state_assigned_no

    @state_assigned_no.setter
    def state_assigned_no(self, state_assigned_no):
        """Sets the state_assigned_no of this TaxBreakdownComponent.

        The state assigned number of the jurisdiction  # noqa: E501

        :param state_assigned_no: The state_assigned_no of this TaxBreakdownComponent.  # noqa: E501
        :type: str
        """

        self._state_assigned_no = state_assigned_no

    @property
    def jurisdiction_region(self):
        """Gets the jurisdiction_region of this TaxBreakdownComponent.  # noqa: E501

        Name identifying the region within the country  # noqa: E501

        :return: The jurisdiction_region of this TaxBreakdownComponent.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction_region

    @jurisdiction_region.setter
    def jurisdiction_region(self, jurisdiction_region):
        """Sets the jurisdiction_region of this TaxBreakdownComponent.

        Name identifying the region within the country  # noqa: E501

        :param jurisdiction_region: The jurisdiction_region of this TaxBreakdownComponent.  # noqa: E501
        :type: str
        """

        self._jurisdiction_region = jurisdiction_region
