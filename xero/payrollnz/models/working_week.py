# coding: utf-8

"""
    Xero Payroll NZ

    This is the Xero Payroll API for orgs in the NZ region.  # noqa: E501

    Contact: api@xero.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401

from xero.models import BaseModel


class WorkingWeek(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "monday": "float",
        "tuesday": "float",
        "wednesday": "float",
        "thursday": "float",
        "friday": "float",
        "saturday": "float",
        "sunday": "float",
    }

    attribute_map = {
        "monday": "monday",
        "tuesday": "tuesday",
        "wednesday": "wednesday",
        "thursday": "thursday",
        "friday": "friday",
        "saturday": "saturday",
        "sunday": "sunday",
    }

    def __init__(
        self,
        monday=None,
        tuesday=None,
        wednesday=None,
        thursday=None,
        friday=None,
        saturday=None,
        sunday=None,
    ):  # noqa: E501
        """WorkingWeek - a model defined in OpenAPI"""  # noqa: E501

        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self.discriminator = None

        self.monday = monday
        self.tuesday = tuesday
        self.wednesday = wednesday
        self.thursday = thursday
        self.friday = friday
        self.saturday = saturday
        self.sunday = sunday

    @property
    def monday(self):
        """Gets the monday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Monday  # noqa: E501

        :return: The monday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this WorkingWeek.

        The number of hours worked on a Monday  # noqa: E501

        :param monday: The monday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if monday is None:
            raise ValueError(
                "Invalid value for `monday`, must not be `None`"
            )  # noqa: E501

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Tuesday  # noqa: E501

        :return: The tuesday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this WorkingWeek.

        The number of hours worked on a Tuesday  # noqa: E501

        :param tuesday: The tuesday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if tuesday is None:
            raise ValueError(
                "Invalid value for `tuesday`, must not be `None`"
            )  # noqa: E501

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Wednesday  # noqa: E501

        :return: The wednesday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this WorkingWeek.

        The number of hours worked on a Wednesday  # noqa: E501

        :param wednesday: The wednesday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if wednesday is None:
            raise ValueError(
                "Invalid value for `wednesday`, must not be `None`"
            )  # noqa: E501

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Thursday  # noqa: E501

        :return: The thursday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this WorkingWeek.

        The number of hours worked on a Thursday  # noqa: E501

        :param thursday: The thursday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if thursday is None:
            raise ValueError(
                "Invalid value for `thursday`, must not be `None`"
            )  # noqa: E501

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Friday  # noqa: E501

        :return: The friday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this WorkingWeek.

        The number of hours worked on a Friday  # noqa: E501

        :param friday: The friday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if friday is None:
            raise ValueError(
                "Invalid value for `friday`, must not be `None`"
            )  # noqa: E501

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Saturday  # noqa: E501

        :return: The saturday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this WorkingWeek.

        The number of hours worked on a Saturday  # noqa: E501

        :param saturday: The saturday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if saturday is None:
            raise ValueError(
                "Invalid value for `saturday`, must not be `None`"
            )  # noqa: E501

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this WorkingWeek.  # noqa: E501

        The number of hours worked on a Sunday  # noqa: E501

        :return: The sunday of this WorkingWeek.  # noqa: E501
        :rtype: float
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this WorkingWeek.

        The number of hours worked on a Sunday  # noqa: E501

        :param sunday: The sunday of this WorkingWeek.  # noqa: E501
        :type: float
        """
        if sunday is None:
            raise ValueError(
                "Invalid value for `sunday`, must not be `None`"
            )  # noqa: E501

        self._sunday = sunday
